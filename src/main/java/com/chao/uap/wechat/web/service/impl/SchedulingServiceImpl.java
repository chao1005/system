/*******************************************************************************
* Copyright (c) 2017 by Hyetec  Corporation all right reserved.
* 2017年11月20日 11:09
* 
*******************************************************************************/
package com.hyetec.uap.wechat.service.impl;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.hyetec.uap.core.service.impl.BaseServiceImpl;
import com.hyetec.uap.wechat.mapper.SchedulingMapper;
import com.hyetec.uap.wechat.model.Scheduling;
import com.hyetec.uap.wechat.service.SchedulingService;
import com.hyetec.uap.wechat.vo.SchedulingVo;

@Service
public class SchedulingServiceImpl extends BaseServiceImpl<Scheduling, SchedulingVo>
		implements SchedulingService {
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table
	 * f_scheduling
	 *
	 * @hyetec
	 */
	private SchedulingMapper schedulingMapper;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table
	 * f_scheduling
	 *
	 * @hyetec
	 */
	public SchedulingMapper getSchedulingMapper() {
		return (SchedulingMapper) baseMapper;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table
	 * f_scheduling
	 *
	 * @hyetec
	 */
	@Autowired
	public void setSchedulingMapper(SchedulingMapper schedulingMapper) throws Exception {
		super.setBaseMapper(schedulingMapper);
		this.schedulingMapper = schedulingMapper;
	}

	@Override
	public List<Scheduling> selectByDate(Date adviceDate) {
		List<Scheduling> schedulings = schedulingMapper.selectByDate(adviceDate);
		if (!schedulings.isEmpty()) {
		}
		return schedulings;
	}

	@Override
	public List<Scheduling> selectByUserId(Long userId) {
		List<Scheduling> schedulings = schedulingMapper.selectYear(userId);
		List<Scheduling> schedulingss = Lists.newArrayList();
		;
		if (!schedulings.isEmpty()) {
			for (int a = 0; a < schedulings.size(); a++) {
				Scheduling schedulingg = new Scheduling();
				schedulingg.setUserId(userId);
				schedulingg.setYear(schedulings.get(a).getYear());
				List<Scheduling> schedulings1 = schedulingMapper.selectByUserId(schedulingg);
				int b = 1;
				if (!schedulings1.isEmpty()) {
					for (int i = 0; i < schedulings1.size(); i++) {
						if (i == 0) {
							schedulings1.get(i).setYear(schedulings.get(a).getYear());
						}
						List<Scheduling> scheduling2 = schedulingMapper
								.selectByAdviceDate(schedulings1.get(i));
						for (int j = 0; j < scheduling2.size(); j++) {
							scheduling2.get(j).setStatus(b);
							b += 1;
						}
						schedulings1.get(i).setSchedulings(scheduling2);
					}
				}
				schedulingss.addAll(schedulingMapper.selectByUserId(schedulingg));

			}
		}
		return schedulingss;
	}

	@Override
	public void delByPkId(Long pkId) {
		schedulingMapper.delByPkId(pkId);

	}

	@Override
	public Scheduling selectByExpertId(Long expertId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void updateEndByPkId(Long pkId) {
		Scheduling scheduling = schedulingMapper.selectByPrimaryKey(pkId);
		DateFormat format = new SimpleDateFormat("HH:mm");
		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
		String str = sdf.format(new Date());
		try {
			if (format.parse(scheduling.getEndTime()).getTime() < new Date().getTime()) {
				scheduling.setEndTime(str);
			}
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		schedulingMapper.updateEndByPkId(scheduling);

	}
}