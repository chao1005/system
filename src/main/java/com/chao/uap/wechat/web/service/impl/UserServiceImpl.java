/*******************************************************************************
* Copyright (c) 2017 by Hyetec  Corporation all right reserved.
* 2017年11月20日 11:09
* 
*******************************************************************************/
package com.hyetec.uap.wechat.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.hyetec.uap.core.service.impl.BaseServiceImpl;
import com.hyetec.uap.wechat.mapper.AdviceMapper;
import com.hyetec.uap.wechat.mapper.AttachmentMapper;
import com.hyetec.uap.wechat.mapper.EnterpriseMapper;
import com.hyetec.uap.wechat.mapper.ExpertMapper;
import com.hyetec.uap.wechat.mapper.InivestorMapper;
import com.hyetec.uap.wechat.mapper.IntentionMapper;
import com.hyetec.uap.wechat.mapper.UserMapper;
import com.hyetec.uap.wechat.model.Advice;
import com.hyetec.uap.wechat.model.Attachment;
import com.hyetec.uap.wechat.model.Enterprise;
import com.hyetec.uap.wechat.model.Expert;
import com.hyetec.uap.wechat.model.Inivestor;
import com.hyetec.uap.wechat.model.Intention;
import com.hyetec.uap.wechat.model.User;
import com.hyetec.uap.wechat.service.UserService;
import com.hyetec.uap.wechat.util.PasswordHelper;
import com.hyetec.uap.wechat.vo.UserVo;

@Service
public class UserServiceImpl extends BaseServiceImpl<User, UserVo> implements UserService {
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table
	 * f_user
	 *
	 * @hyetec
	 */
	private UserMapper userMapper;
	@Autowired
	private AttachmentMapper attachmentMapper;
	@Autowired
	private EnterpriseMapper enterpriseMapper;
	@Autowired
	private InivestorMapper inivestorMapper;
	@Autowired
	private ExpertMapper expertMapper;
	@Autowired
	private AdviceMapper adviceMapper;
	@Autowired
	private IntentionMapper intentionMapper;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table
	 * f_user
	 *
	 * @hyetec
	 */
	public UserMapper getUserMapper() {
		return (UserMapper) baseMapper;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table
	 * f_user
	 *
	 * @hyetec
	 */
	@Autowired
	public void setUserMapper(UserMapper userMapper) throws Exception {
		super.setBaseMapper(userMapper);
		this.userMapper = userMapper;
	}

	@Override
	public void insertUser(User user, Attachment attachment) {

		if (attachment.getName() != null || attachment.getName() != "") {
			attachment.setCreateTime(new Date());
			attachmentMapper.insertSelective(attachment);
			user.setImg(attachment.getPkId().toString());
		}
		user.setCreateTime(new Date());
		userMapper.insertSelective(user);
	}

	@Override
	public void updateUser(User user, Attachment attachment) {
		if (attachment.getName() != null || attachment.getName() != "") {
			if (attachment.getPkId() == null) {
				attachment.setCreateTime(new Date());
				attachmentMapper.insertSelective(attachment);
			} else {
				attachmentMapper.updateByPrimaryKeySelective(attachment);
			}
			user.setImg(attachment.getPkId().toString());
		}
		userMapper.updateByPrimaryKeySelective(user);
	}

	@Override
	public void delUser(Long id) {
		userMapper.deleteByPrimaryKey(id);
		enterpriseMapper.delByUserId(id);
		expertMapper.delByUserId(id);
		inivestorMapper.delByUserId(id);
		intentionMapper.delByUserId(id);
		adviceMapper.deleAdviceByUserId(id);
	}

	@Override
	public int checkUserName(String userName, String id) {
		User user = new User();
		if (id.equals("-1")) {
			user.setLoginName(userName);
		} else {
			user.setLoginName(userName);
			user.setPkId(Long.valueOf(id));
		}
		return userMapper.checkUserName(user);
	}

	@Override
	public User login(String loginName) {
		User user = new User();
		try {
			user.setLoginName(loginName);
			// user.setStatus(0);// 正常
			// user = userMapper.select(user);
			user = userMapper.login(loginName);
			// wrap(user);
			logger.info("user:{}", user);
		} catch (Exception e) {
			logger.error("user:{}", e);
		}

		return user;
	}

	@Override
	public List<User> selectAllcustomer(String category, String myuserid) {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<>();
		map.put("category", category);
		map.put("myuserid", myuserid);
		return userMapper.selectAllcustomer(map);
	}

	@Override
	public void changePw(User user) {
		// TODO Auto-generated method stub

		userMapper.updatePw(user);

	}

	@Override
	public User findUser(User user) {
		// TODO Auto-generated method stub

		User u = userMapper.select(user);

		return u;
	}

	@Override
	public int checkMobile(String mobile, String id) {
		// TODO Auto-generated method stub
		User user = new User();
		if (id.equals("-1")) {
			user.setMobile(mobile);
		} else {
			user.setMobile(mobile);
			user.setPkId(Long.valueOf(id));
		}
		return userMapper.checkMobile(user);
	}

	@Override
	public User adminlogin(String loginName) {
		// TODO Auto-generated method stub
		return userMapper.adminlogin(loginName);
	}

	@Override
	public Boolean chechAdminLogin(User users) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<User> selectAllUser() {
		// TODO Auto-generated method stub
		return userMapper.selectAllUser();
	}

	@Override
	public List<User> selectAllUserByname(User user) {
		// TODO Auto-generated method stub
		return userMapper.selectAllUserByname(user);
	}

	@Override
	public void insertEnterprise(User user, Enterprise enterprise) {
		// TODO Auto-generated method stub

		user.setCreateTime(new Date());

		userMapper.insertSelective(user);

		enterprise.setUserId(user.getPkId());

		enterpriseMapper.insertSelective(enterprise);

	}

	@Override
	public void insertInivestor(User user, Inivestor inivestor) {
		// TODO Auto-generated method stub

		user.setCreateTime(new Date());

		userMapper.insertSelective(user);

		inivestor.setUserId(user.getPkId());

		inivestorMapper.insertSelective(inivestor);
	}

	@Override
	public void insertUser(String user, String order) {
		// TODO Auto-generated method stub
		User users = JSON.parseObject(user, User.class);
		// users.setImg("/"+users.getImg());
		users.setCreateTime(new Date());
		new PasswordHelper().encryptPassword(users);
		userMapper.insertSelective(users);
		if (users.getCategory().equals(new Long(3))) {
			Enterprise enterprises = JSON.parseObject(order, Enterprise.class);
			enterprises.setCreateTime(new Date());
			enterprises.setStatus(0);
			enterprises.setUserId(users.getPkId());
			enterpriseMapper.insertSelective(enterprises);
		}else{
			Expert experts = JSON.parseObject(order, Expert.class);
			experts.setCreateTime(new Date());
			experts.setStatus(0);
			experts.setUserId(users.getPkId());
			expertMapper.insertSelective(experts);
		}

	}

	@Override
	public void updateUser(String user, String order) {
		// TODO Auto-generated method stub
		User users = JSON.parseObject(user, User.class);
		User user1 = userMapper.selectByPrimaryKey(users.getPkId());
		/*String img = users.getImg();
		if (img != null && !"".equals(img)) {
			if (!"/".equals(img.substring(0))) {
				users.setImg("/" + users.getImg());
			}
		}*/
		if (!user1.getPassword().equals(users.getPassword())) {
			new PasswordHelper().encryptPassword(users);
		}
		userMapper.updateByPrimaryKeySelective(users);
		if (users.getCategory().equals(new Long(3))) {
			Enterprise enterprises = JSON.parseObject(order, Enterprise.class);
			if (enterprises.getPkId() != null) {
				enterpriseMapper.updateByPrimaryKeySelective(enterprises);
				adviceMapper.deleAdviceByenterpriseId(enterprises.getPkId());
			} else {
				enterpriseMapper.delByUserId(users.getPkId());
				expertMapper.delByUserId(users.getPkId());
				inivestorMapper.delByUserId(users.getPkId());
				intentionMapper.delByUserId(users.getPkId());
				enterprises.setCreateTime(new Date());
				enterprises.setStatus(0);
				enterprises.setUserId(users.getPkId());
				enterpriseMapper.insertSelective(enterprises);
			}
		}else{
			Expert experts = JSON.parseObject(order, Expert.class);
			if (experts.getPkId() != null) {
				expertMapper.updateByPrimaryKeySelective(experts);
			} else {
				enterpriseMapper.delByUserId(users.getPkId());
				expertMapper.delByUserId(users.getPkId());
				inivestorMapper.delByUserId(users.getPkId());
				intentionMapper.delByUserId(users.getPkId());
				adviceMapper.deleAdviceByUserId(users.getPkId());
				experts.setCreateTime(new Date());
				experts.setStatus(0);
				experts.setUserId(users.getPkId());
				expertMapper.insertSelective(experts);
			}
		}

	}

	@Override
	public void updateUser(String user, String order, String orderList, String category) {
		User users = JSON.parseObject(user, User.class);
		// users.setImg("/" + users.getImg());
		User user1 = userMapper.selectByPrimaryKey(users.getPkId());
		if (!user1.getPassword().equals(users.getPassword())) {
			new PasswordHelper().encryptPassword(users);
		}
		userMapper.updateByPrimaryKeySelective(users);
		/*if (category.equals("3")) {
			Enterprise enterprises = JSON.parseObject(order, Enterprise.class);
			List<Advice> advices = JSONArray.parseArray(orderList, Advice.class);
			if (enterprises.getPkId() != null) {
				enterpriseMapper.updateByPrimaryKeySelective(enterprises);
				adviceMapper.deleAdviceByenterpriseId(enterprises.getPkId());
			} else {
				enterpriseMapper.delByUserId(users.getPkId());
				expertMapper.delByUserId(users.getPkId());
				inivestorMapper.delByUserId(users.getPkId());
				intentionMapper.delByUserId(users.getPkId());
				adviceMapper.deleAdviceByUserId(users.getPkId());
				enterprises.setCreateTime(new Date());
				enterprises.setStatus(0);
				enterprises.setUserId(users.getPkId());
				enterpriseMapper.insertSelective(enterprises);
			}
			for (Advice advicee : advices) {
				advicee.setCreateTime(new Date());
				advicee.setEnterpriseId(enterprises.getPkId());
				advicee.setStatus(0);
				advicee.setUserId(users.getPkId());
				adviceMapper.insertSelective(advicee);
			}
		} else*/ 
		if (category.equals("4")) {
			Inivestor inivestorr = JSON.parseObject(order, Inivestor.class);
			List<Intention> intentions = JSONArray.parseArray(orderList, Intention.class);
			if (inivestorr.getPkId() != null) {
				inivestorMapper.updateByPrimaryKeySelective(inivestorr);
				intentionMapper.delByInivestorId(inivestorr.getPkId());
			} else {
				enterpriseMapper.delByUserId(users.getPkId());
				expertMapper.delByUserId(users.getPkId());
				inivestorMapper.delByUserId(users.getPkId());
				intentionMapper.delByUserId(users.getPkId());
				adviceMapper.deleAdviceByUserId(users.getPkId());
				inivestorr.setCreateTime(new Date());
				inivestorr.setStatus(0);
				inivestorr.setUserId(users.getPkId());
				inivestorMapper.insertSelective(inivestorr);
			}
			for (Intention intention : intentions) {
				intention.setCreateTime(new Date());
				intention.setInivestorId(inivestorr.getPkId());
				intention.setUserId(users.getPkId());
				intentionMapper.insertSelective(intention);
			}
		}

	}

	@Override
	public void insertUser(String user, String order, String orderList, String category) {
		try {
			User users = JSON.parseObject(user, User.class);
			/*String img = users.getImg();
			if (img != null && !"".equals(img)) {
				if (!"/".equals(img.substring(0))) {
					users.setImg("/" + users.getImg());
				}
			}*/
			new PasswordHelper().encryptPassword(users);
			users.setCreateTime(new Date());
			userMapper.insertSelective(users);
			/*if (category.equals("3")) {
				Enterprise enterprises = JSON.parseObject(order, Enterprise.class);
				List<Advice> advices = JSONArray.parseArray(orderList, Advice.class);
				enterprises.setCreateTime(new Date());
				enterprises.setStatus(0);
				enterprises.setUserId(users.getPkId());
				enterpriseMapper.insertSelective(enterprises);
				for (Advice advicee : advices) {
					advicee.setCreateTime(new Date());
					advicee.setEnterpriseId(enterprises.getPkId());
					advicee.setStatus(0);
					advicee.setUserId(users.getPkId());
					adviceMapper.insertSelective(advicee);
				}
			} else */
			if (category.equals("4")) {
				Inivestor inivestorr = JSON.parseObject(order, Inivestor.class);
				List<Intention> intentions = JSONArray.parseArray(orderList, Intention.class);
				inivestorr.setCreateTime(new Date());
				inivestorr.setStatus(0);
				inivestorr.setUserId(users.getPkId());
				inivestorMapper.insertSelective(inivestorr);
				for (Intention intention : intentions) {
					intention.setCreateTime(new Date());
					intention.setInivestorId(inivestorr.getPkId());
					intention.setUserId(users.getPkId());
					intentionMapper.insertSelective(intention);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}