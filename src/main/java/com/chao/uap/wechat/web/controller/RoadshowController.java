/*******************************************************************************
* Copyright (c) 2017 by Hyetec  Corporation all right reserved.
* 2017年11月20日 11:09
* 
*******************************************************************************/
package com.hyetec.uap.wechat.web.controller;

import java.io.File;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.hyetec.uap.core.web.controller.BaseController;
import com.hyetec.uap.wechat.model.Attachment;
import com.hyetec.uap.wechat.model.Dictionary;
import com.hyetec.uap.wechat.model.Enterprise;
import com.hyetec.uap.wechat.model.Roadshow;
import com.hyetec.uap.wechat.model.User;
import com.hyetec.uap.wechat.service.AttachmentService;
import com.hyetec.uap.wechat.service.ChatRoomService;
import com.hyetec.uap.wechat.service.DictionaryService;
import com.hyetec.uap.wechat.service.EnterpriseService;
import com.hyetec.uap.wechat.service.RoadshowService;
import com.hyetec.uap.wechat.vo.EnterpriseVo;
import com.hyetec.uap.wechat.vo.RoadshowVo;

@Controller
@RequestMapping("/roadshow")
public class RoadshowController extends BaseController<Roadshow, RoadshowVo> {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table f_roadshow
     *
     * @hyetec
     */
    private RoadshowService roadshowService;
    @Autowired
    private DictionaryService dictionaryService;
    @Autowired
    private EnterpriseService enterpriseService;
    @Autowired
    private AttachmentService attachmentService;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table f_roadshow
     *
     * @hyetec
     */
    public RoadshowService getRoadshowService() {
        return( RoadshowService)baseService;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table f_roadshow
     *
     * @hyetec
     */
    @Autowired
    public void setRoadshowService(RoadshowService roadshowService) {
        super.setBaseService(roadshowService )  ;
        this.roadshowService= (RoadshowService )baseService;
    }
    
    @RequestMapping("/list")
   	public String list(RoadshowVo roadshowVo, HttpServletRequest req, HttpServletResponse res,
   			Model model) {
       	List<Dictionary> aduitorStatus = dictionaryService.selectByType("aduitorStatus");
       	model.addAttribute("aduitorStatus",JSONArray.toJSON(aduitorStatus));
   		model.addAttribute("roadshowVo", roadshowVo);

   		return "/roadshow/list";
       }
    
    @RequestMapping("/front/list")
   	public String wechatList( HttpServletRequest req, HttpServletResponse res,
   			Model model) {
       	List<Roadshow> roadshows = roadshowService.selectAllw();
       	model.addAttribute("roadshows",roadshows);

   		return "/wetchat/roadshow/list";
       }
      
   
    @RequestMapping("/front/find/{id}")
    public String find(Model model,@PathVariable Long id){
    	Roadshow roadshow = roadshowService.selectByPrimaryKey(id);
       	Enterprise enterprise = enterpriseService.selectByPrimaryKey(roadshow.getBody());
       	List<Attachment> attachments = attachmentService.selectByCategory(roadshow.getPkId().toString());
       	Attachment attachment = attachmentService.selectByPrimaryKey(Long.valueOf(roadshow.getVideo()));
       	model.addAttribute("attachments",attachments);
       	model.addAttribute("attachment",attachment);
       	model.addAttribute("enterprise",enterprise);
   		model.addAttribute("roadshow", roadshow);
    	return "/wetchat/roadshow/find";
    }

    @RequestMapping("/toAdd")
   	public String add(Model model,Roadshow roadshow,EnterpriseVo enterpriseVo) {
    	List<Dictionary> aduitorStatus = dictionaryService.selectByType("aduitorStatus");
       	model.addAttribute("aduitorStatus",aduitorStatus);
       	model.addAttribute("roadshow", roadshow);
   		return "/roadshow/form";
       }
    
    
    @RequestMapping("/open")
   	public String open() {
       	
   		return "/roadshow/open";
       }
       

    @RequestMapping("/toEdit/{id}/{page}")
   	public String edit(@PathVariable Long id ,@PathVariable String page , Model model,Roadshow roadshoww) {
    	
       	Roadshow roadshow = roadshowService.selectByPrimaryKey(id);
       	List<Dictionary> aduitorStatus = dictionaryService.selectByType("aduitorStatus");
       	String name = enterpriseService.selectByPrimaryKey(roadshow.getBody()).getName();
       	List<Attachment> attachments = attachmentService.selectByCategory(roadshow.getPkId().toString());
       	Attachment attachment = attachmentService.selectByPrimaryKey(Long.valueOf(roadshow.getVideo()));
       	model.addAttribute("attachments",attachments);
       	model.addAttribute("attachment",attachment);
       	model.addAttribute("aduitorStatus",aduitorStatus);
       	model.addAttribute("name",name);
    	model.addAttribute("sname",roadshoww);
    	model.addAttribute("page",page);
   		model.addAttribute("roadshow", roadshow);
   		return "/roadshow/form";
       }
       
    
       
       @ResponseBody
       @RequestMapping(value="/list.json")
       public RoadshowVo list(RoadshowVo roadshowVo){
       	roadshowService.selectAll(roadshowVo);
       	return roadshowVo;
       }
       
       @ResponseBody
       @RequestMapping(value="/checkName.json")
       public int checkName(String name,String id){
       	int tag = -1;
       	try {
   			tag = roadshowService.checkName(name,id);
   			
   		} catch (Exception e) {
   			// TODO: handle exception
   			e.printStackTrace();
   		}
       	return  tag;
       }
       
       @ResponseBody
       @RequestMapping(value="/del/{id}")
       public boolean del(@PathVariable Long id,HttpServletRequest request){
       	boolean tag = true;
       	try {
       		roadshowService.delByPkId(id,request);
   		} catch (Exception e) {
   			// TODO: handle exception
   			e.printStackTrace();
   			tag = false;
   		}
       	return tag;
       }
       
       
       
       @ResponseBody
       @RequestMapping(value="/toAdd.json")
       public Boolean toAdd(String roadshow,String fileList,String video){
       	boolean tag = true;
       	try {
       		Roadshow roadshows = JSON.parseObject(roadshow, Roadshow.class);
       		List<Attachment> attachmentsFile = JSONArray.parseArray(fileList, Attachment.class);
       		Attachment attachmentVideo = JSON.parseObject(video, Attachment.class);
   			roadshowService.insertRoad(roadshows,attachmentsFile,attachmentVideo);
   			
   		} catch (Exception e) {
   			// TODO: handle exception
   			e.printStackTrace();
   		}
       	return tag;
       }
       
       @ResponseBody
       @RequestMapping(value="/toEdit.json")
       public Boolean toEdit(String roadshow,String fileList,String video,HttpServletRequest request){
       	boolean tag = true;
       	try {
       		Roadshow roadshows = JSON.parseObject(roadshow, Roadshow.class);
       		List<Attachment> attachmentsFile = JSONArray.parseArray(fileList, Attachment.class);
       		Attachment attachmentVideo = JSON.parseObject(video, Attachment.class);
       		roadshowService.updateRoad(roadshows,attachmentsFile,attachmentVideo);
   		} catch (Exception e) {
   			// TODO: handle exception
   			e.printStackTrace();
   		}
       	return  tag;
       }
       
       
    @ResponseBody
   	@RequestMapping("delFile.json")
   	public Boolean delPhoto(Model model, String src, HttpServletRequest request, HttpServletResponse response) {
   		Boolean b = true;
   		try {
   			String url = request.getSession().getServletContext().getRealPath("/");
   			File file = new File(url + src);
   			file.delete();
   		} catch (Exception e) {
   			e.printStackTrace();
   			b = false;
   		}
   		return b;
   	}
}