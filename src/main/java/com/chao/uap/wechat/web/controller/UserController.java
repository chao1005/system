/*******************************************************************************
* Copyright (c) 2017 by Hyetec  Corporation all right reserved.
* 2017年11月20日 11:09
* 
*******************************************************************************/
package com.hyetec.uap.wechat.web.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSON;
import com.hyetec.uap.core.utils.PropertiesUtils;
import com.hyetec.uap.core.web.controller.BaseController;
import com.hyetec.uap.wechat.model.Advice;
import com.hyetec.uap.wechat.model.Dictionary;
import com.hyetec.uap.wechat.model.Enterprise;
import com.hyetec.uap.wechat.model.Expert;
import com.hyetec.uap.wechat.model.Inivestor;
import com.hyetec.uap.wechat.model.Intention;
import com.hyetec.uap.wechat.model.Message;
import com.hyetec.uap.wechat.model.User;
import com.hyetec.uap.wechat.service.AdviceService;
import com.hyetec.uap.wechat.service.AttachmentService;
import com.hyetec.uap.wechat.service.DictionaryService;
import com.hyetec.uap.wechat.service.EnterpriseService;
import com.hyetec.uap.wechat.service.ExpertService;
import com.hyetec.uap.wechat.service.InivestorService;
import com.hyetec.uap.wechat.service.IntentionService;
import com.hyetec.uap.wechat.service.MessageSerivce;
import com.hyetec.uap.wechat.service.UserService;
import com.hyetec.uap.wechat.util.PasswordHelper;
import com.hyetec.uap.wechat.util.UserUtils;
import com.hyetec.uap.wechat.util.VerificationCodeSendUtil;
import com.hyetec.uap.wechat.vo.UserVo;
import com.sun.tracing.dtrace.Attributes;

import net.sf.json.JSONArray;

@Controller
@RequestMapping("/user")
public class UserController extends BaseController<User, UserVo> {
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table
	 * f_user
	 *
	 * @hyetec
	 */
	private UserService userService;
	@Autowired
	private DictionaryService dictionaryService;
	@Autowired
	private AttachmentService attachmentService;
	@Autowired
	private EnterpriseService enterpriseService;
	@Autowired
	private ExpertService expertService;
	@Autowired
	private InivestorService inivestorService;
	@Autowired
	private IntentionService intentionService;
	@Autowired
	private AdviceService adviceService;
	@Autowired
	private MessageSerivce messageSerivce;
	
	private final Logger logger = LoggerFactory.getLogger(UserController.class);
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table
	 * f_user
	 *
	 * @hyetec
	 */
	public UserService getUserService() {
		return (UserService) baseService;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table
	 * f_user
	 *
	 * @hyetec
	 */
	@Autowired
	public void setUserService(UserService userService) {
		super.setBaseService(userService);
		this.userService = (UserService) baseService;
	}


    
    
    @RequestMapping("/list")
	public String list(UserVo userVo, HttpServletRequest req, HttpServletResponse res,
			Model model) {
    	
    	List<Dictionary> userType = dictionaryService.selectByType("userType");
    	List<Dictionary> checkStatus = dictionaryService.selectByType("checkStatus");
    	if (userVo.getUser() != null) {
    		if(userVo.getUser().getCheckStatus() != null){
    			if(userVo.getUser().getCheckStatus().equals("-1")){
    				userVo.getUser().setCheckStatus(0);
    			}
			}
		}
    	model.addAttribute("checkStatus", checkStatus);
    	model.addAttribute("userType",JSONArray.fromObject(userType));
		model.addAttribute("userVo", userVo);

		return "/user/list";
	}

	@RequestMapping(value = "/selectAll")
	public String selectAllList(Model model) {

		List<User> users = userService.selectAllUser();
		model.addAttribute("users", users);

		return "/expert/userList";
	}

	@RequestMapping(value = "/selectAll/{name}")
	public String selectAllList(Model model, @PathVariable String name) {
		User user = new User();
		user.setUserName(name);
		List<User> users = userService.selectAllUserByname(user);
		model.addAttribute("users", users);
		model.addAttribute("name", name);

		return "/expert/userList";
	}

	@RequestMapping("/toAdd")
	public String add(Model model, User user) {

		// 用户
		List<Dictionary> sex = dictionaryService.selectByType("sex");
		List<Dictionary> userType = dictionaryService.selectByType("userType");
		List<Dictionary> identityType = dictionaryService.selectByType("identityType");
		List<Dictionary> userStatus = dictionaryService.selectByType("userStatus");
		List<Dictionary> checkStatus = dictionaryService.selectByType("checkStatus");
		model.addAttribute("user", user);
		model.addAttribute("sex", sex);
		model.addAttribute("userType", userType);
		model.addAttribute("identityType", identityType);
		model.addAttribute("userStatus", userStatus);
		model.addAttribute("checkStatus", checkStatus);

		// 专家
		List<Dictionary> expertType = dictionaryService.selectByType("expertType");
		List<Dictionary> expertLevel = dictionaryService.selectByType("expertLevel");
		model.addAttribute("expertLevel", expertLevel);
		model.addAttribute("expertType", expertType);

		// 企业
		List<Dictionary> enterprisePermission = dictionaryService.selectByType("enterprisePermission");
		List<Dictionary> enterpriseLevel = dictionaryService.selectByType("enterpriseLevel");
		model.addAttribute("enterprisePermission", enterprisePermission);
		model.addAttribute("enterpriseLevel", enterpriseLevel);
		//model.addAttribute("adviceCount", 0);

		// 投资者
		List<Dictionary> inivestorPermission = dictionaryService.selectByType("inivestorPermission");
		List<Dictionary> intention = dictionaryService.selectByType("intention");
		model.addAttribute("inivestorPermission", inivestorPermission);
		model.addAttribute("intention", intention);

		return "/user/form";
	}

	@RequestMapping("/toEdit/{id}/{checkStatu}/{page}")
	public String edit(@PathVariable Long id ,@PathVariable String checkStatu,@PathVariable String page,User users, Model model) {
		// 用户
		List<Dictionary> sex = dictionaryService.selectByType("sex");
		List<Dictionary> userType = dictionaryService.selectByType("userType");
		List<Dictionary> identityType = dictionaryService.selectByType("identityType");
		List<Dictionary> userStatus = dictionaryService.selectByType("userStatus");
		List<Dictionary> checkStatus = dictionaryService.selectByType("checkStatus");
		User user = userService.selectByPrimaryKey(id);
		model.addAttribute("user", user);
		model.addAttribute("users", users);
		model.addAttribute("sex", sex);
    	model.addAttribute("userType", userType);
    	model.addAttribute("identityType", identityType);
    	model.addAttribute("userStatus", userStatus);
    	model.addAttribute("checkStatus", checkStatus);
    	model.addAttribute("checkStatu", checkStatu);
    	model.addAttribute("page", page);
    	
		// 专家
		List<Dictionary> expertType = dictionaryService.selectByType("expertType");
		List<Dictionary> expertLevel = dictionaryService.selectByType("expertLevel");
		model.addAttribute("expertLevel", expertLevel);
		model.addAttribute("expertType", expertType);
		if (user.getCategory().equals(Long.valueOf(5))) {
			Expert expert = expertService.selectByUser(user.getPkId());
			model.addAttribute("expert", expert);
		}

		// 企业
		List<Dictionary> enterprisePermission = dictionaryService.selectByType("enterprisePermission");
		List<Dictionary> enterpriseLevel = dictionaryService.selectByType("enterpriseLevel");
		model.addAttribute("enterprisePermission", enterprisePermission);
		model.addAttribute("enterpriseLevel", enterpriseLevel);
		model.addAttribute("adviceCount", 0);
		if (user.getCategory().equals(Long.valueOf(3))) {
			Enterprise enterprise = enterpriseService.selectByUserId(user.getPkId());
			//List<Advice> advices = adviceService.selectByEnterpriseId(enterprise.getPkId());
			model.addAttribute("enterprise", enterprise);
			//model.addAttribute("advices", advices);
			//model.addAttribute("adviceCount", advices.size());
		}

		// 投资者
		List<Dictionary> inivestorPermission = dictionaryService.selectByType("inivestorPermission");
		List<Dictionary> intention = dictionaryService.selectByType("intention");
		if (user.getCategory().equals(Long.valueOf(4))) {
			Inivestor inivestor = inivestorService.selectByUserId(user.getPkId());
			List<Intention> intentions = intentionService.selectByInivestorId(inivestor.getPkId());
			for (int i = 0; i < intention.size(); i++) {
				intention.get(i).setStatus(0);
				for (int j = 0; j < intentions.size(); j++) {
					if (intentions.get(j).getCategory().equals(Long.valueOf(intention.get(i).getSort()))) {
						intention.get(i).setStatus(2);
					}
				}
			}
			model.addAttribute("inivestorPermission", inivestorPermission);
			model.addAttribute("intention", intention);
			model.addAttribute("inivestor", inivestor);
			model.addAttribute("intentions", intentions);
		} else {
			model.addAttribute("inivestorPermission", inivestorPermission);
			model.addAttribute("intention", intention);
		}
		return "/user/form";
	}

	@ResponseBody
	@RequestMapping(value = "/list.json")
	public UserVo list(UserVo userVo) {
		userService.selectAll(userVo);
		return userVo;
	}

	@ResponseBody
	@RequestMapping("/adminlogin.json")
	public Boolean adminlogin(String orderobj) {
		Boolean tag = true;
		try {
			User users = JSON.parseObject(orderobj, User.class);
			User userssalt = userService.adminlogin(users.getLoginName());
			if (userssalt != null) {
				users.setSalt(userssalt.getSalt());
				String pass = new PasswordHelper().checkPassword(users);
				if (!pass.equals(userssalt.getPassword())) {
					tag = false;
				}
			} else {
				tag = false;
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			tag = false;
		}
		return tag;
	}

	@ResponseBody
	@RequestMapping(value = "/del/{id}")
	public boolean del(@PathVariable Long id) {
		boolean tag = true;
		try {
			userService.delUser(id);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			tag = false;
		}
		return tag;
	}

	@ResponseBody
	@RequestMapping(value = "/toAdd.json")
	public Boolean toAdd(String user) {
		boolean tag = true;
		try {
			User users = JSON.parseObject(user, User.class);
			// users.setImg("/" + users.getImg());
			new PasswordHelper().encryptPassword(users);
			userService.insertSelective(users);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return tag;
	}

	@ResponseBody
	@RequestMapping(value = "/add.json")
	public Boolean add(String user, String order, String orderList, String category) {
		boolean tag = true;
		try {

			userService.insertUser(user, order, orderList, category);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return tag;
	}

	@ResponseBody
	@RequestMapping(value = "/edit.json")
	public Boolean edit(String user, String order, String orderList, String category) {
		boolean tag = true;
		try {
			userService.updateUser(user, order, orderList, category);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return tag;
	}

	@ResponseBody
	@RequestMapping(value = "/Add.json")
	public Boolean Add(String user, String order) {
		boolean tag = true;
		try {

			userService.insertUser(user, order);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return tag;
	}

	@ResponseBody
	@RequestMapping(value = "/Edit.json")
	public Boolean Edit(String user, String order) {
		User users = JSON.parseObject(user, User.class);
		logger.info("用户名："+users.getUserName(), "");
		boolean tag = true;
		try {
			userService.updateUser(user, order);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return tag;
	}

	@ResponseBody
	@RequestMapping(value = "/toEdit.json")
	public Boolean toEdit(String user) {
		boolean tag = true;
		try {
			User users = JSON.parseObject(user, User.class);
			/*String img = users.getImg();
			if (img != null && !"".equals(img)) {
				if (!"/".equals(img.substring(0))) {
					users.setImg("/" + users.getImg());
				}
			}
			users.setImg("/" + users.getImg());*/
			User user1 = userService.selectByPrimaryKey(users.getPkId());
			if (!user1.getPassword().equals(users.getPassword())) {
				new PasswordHelper().encryptPassword(users);
			}
			userService.updateByPrimaryKeySelective(users);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return tag;
	}

	@ResponseBody
	@RequestMapping(value = "/checkUserName.json")
	public int checkUserName(String userName, String id) {
		int tag = -1;
		try {
			tag = userService.checkUserName(userName, id);

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return tag;
	}

	@ResponseBody
	@RequestMapping(value = "/checkMobile.json")
	public int checkMobile(String mobile, String id) {
		int tag = -1;
		try {
			tag = userService.checkMobile(mobile, id);

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return tag;
	}
	
	
	@ResponseBody
	@RequestMapping(value = "/changeUserStatus.json", method = RequestMethod.POST)
	public int changeUserStatus( Long tid, int checkStatus){
		int tag = checkStatus;
		
		try {
			User user = new User();
			user.setPkId(tid);
			user.setCheckStatus(checkStatus);
			userService.updateByPrimaryKeySelective(user);
			if (checkStatus == 2) {
				user = userService.selectByPrimaryKey(tid);
				User users = UserUtils.getUser();
				String content = "【蒙股大盈】： 您的账号已经通过审核了，请通过公众号【企业陪跑教练系统】登陆。";
				Date date = new Date();
				if (user.getMobile() != null && user.getMobile() != "") {
					
					try {
						
						String host = PropertiesUtils.getSettingProperty("verificationHost");
						
						String userid = PropertiesUtils.getSettingProperty("verificationId");
						
						String password = PropertiesUtils.getSettingProperty("secretKey");
						
						String account = PropertiesUtils.getSettingProperty("verificationAccount");
						
						Map<String,String> params = new HashMap<>();
						
						params.put("userid", userid);
						
						params.put("account", account);
						
						params.put("password", password);
						
						params.put("mobile", user.getMobile());
						
						params.put("content", content);
						
						params.put("sendTime", "");
						
						params.put("action", "send");
						
						params.put("extno", "");
						
						String res = VerificationCodeSendUtil.doPost(host, params);
						if(null != res ){
							
							Message message = new Message();
							message.setBussinessId(tid);
							message.setSender(users.getPkId().toString());
							message.setRecipient(tid.toString());
							message.setContent(content);
							message.setType(1);
							message.setResult(1);
							message.setSendTime(new Date());
							message.setCreateTime(date);
							message.setStatus(0);
							messageSerivce.insertSelective(message);
						}else {
							tag = -2;
						}
						
					} catch (Exception e) {
						// TODO: handle exception
						e.printStackTrace();
						
						//tag = Boolean.FALSE;
						}
				}
				
			}
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			tag = -1;
		}
		
		return tag;
	}

	@RequestMapping(value = "/Upload")
	@ResponseBody
	public void inventoryFileUpload(@RequestParam("file") MultipartFile[] files, String destDir, HttpServletRequest request, HttpServletResponse response) {
		// 文件上传下载的父目录
		attachmentService.insertOrUpload(files, response);
	}

}