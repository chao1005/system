/*******************************************************************************
* Copyright (c) 2017 by Hyetec  Corporation all right reserved.
* 2017年11月20日 11:09
* 
*******************************************************************************/
package com.hyetec.uap.wechat.web.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.hyetec.uap.core.web.controller.BaseController;
import com.hyetec.uap.wechat.model.Dictionary;
import com.hyetec.uap.wechat.model.Inivestor;
import com.hyetec.uap.wechat.model.Intention;
import com.hyetec.uap.wechat.service.DictionaryService;
import com.hyetec.uap.wechat.service.InivestorService;
import com.hyetec.uap.wechat.service.IntentionService;
import com.hyetec.uap.wechat.vo.InivestorVo;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping("/inivestor")
public class InivestorController extends BaseController<Inivestor, InivestorVo> {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table f_inivestor
     *
     * @hyetec
     */
    private InivestorService inivestorService;
    @Autowired
    private DictionaryService dictionaryService;
    @Autowired
    private IntentionService intentionService;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table f_inivestor
     *
     * @hyetec
     */
    public InivestorService getInivestorService() {
        return( InivestorService)baseService;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table f_inivestor
     *
     * @hyetec
     */
    @Autowired
    public void setInivestorService(InivestorService inivestorService) {
        super.setBaseService(inivestorService )  ;
        this.inivestorService= (InivestorService )baseService;
    }
    
    @RequestMapping("/list")
   	public String list(InivestorVo inivestorVo, HttpServletRequest req, HttpServletResponse res,
   			Model model) {
       	List<Dictionary> inivestorPermission = dictionaryService.selectByType("inivestorPermission");
       	model.addAttribute("inivestorPermission",JSONArray.toJSON(inivestorPermission));
   		model.addAttribute("inivestorVo", inivestorVo);

   		return "/inivestor/list";
       }
       

    @RequestMapping("/toAdd")
   	public String add(Model model,Inivestor inivestor) {
       	
    	List<Dictionary> inivestorPermission = dictionaryService.selectByType("inivestorPermission");
    	List<Dictionary> intention = dictionaryService.selectByType("intention");
       	model.addAttribute("inivestorPermission",inivestorPermission);
       	model.addAttribute("intention",intention);
       	model.addAttribute("inivestor", inivestor);
   		return "/inivestor/form";
       }
       

    @RequestMapping("/toEdit/{id}")
   	public String edit(@PathVariable Long id , Model model) {

       	Inivestor inivestor = inivestorService.selectByPrimaryKey(id);
       	List<Dictionary> inivestorPermission = dictionaryService.selectByType("inivestorPermission");
    	List<Dictionary> intention = dictionaryService.selectByType("intention");
    	List<Intention> intentions = intentionService.selectByInivestorId(id);
		for (int i = 0; i < intention.size(); i++) {
			intention.get(i).setStatus(0);
			for (int j = 0; j < intentions.size(); j++) {
				if(intentions.get(j).getCategory() == Long.valueOf(intention.get(i).getSort())){
					intention.get(i).setStatus(2);
				}
			}
		}
       	model.addAttribute("inivestorPermission",inivestorPermission);
       	model.addAttribute("intention",intention);
       	model.addAttribute("inivestor", inivestor);
       	model.addAttribute("intentions", intentions);
   		return "/inivestor/form";
       }
       
       
       @ResponseBody
       @RequestMapping(value="/list.json")
       public InivestorVo list(InivestorVo inivestorVo){
       	inivestorService.selectAll(inivestorVo);
       	return inivestorVo;
       }
       
       @ResponseBody
       @RequestMapping(value="/del/{id}")
       public boolean del(@PathVariable Long id){
       	boolean tag = true;
       	try {
   			inivestorService.delByPkId(id);
   		} catch (Exception e) {
   			// TODO: handle exception
   			e.printStackTrace();
   			tag = false;
   		}
       	return tag;
       }
       
       
       
       @ResponseBody
       @RequestMapping(value="/toAdd.json")
       public Boolean toAdd(String inivestor,String intentionList){
       	boolean tag = true;
       	try {
       		Inivestor inivestorr = JSON.parseObject(inivestor, Inivestor.class);
       		List<Intention> intentions = JSONArray.parseArray(intentionList, Intention.class);
   			inivestorService.insertEnterprise(inivestorr, intentions);
   		} catch (Exception e) {
   			// TODO: handle exception
   			e.printStackTrace();
   		}
       	return tag;
       }
       
       @ResponseBody
       @RequestMapping(value="/toEdit.json")
       public Boolean toEdit(String inivestor,String intentionList){
       	boolean tag = true;
       	try {
       		Inivestor inivestorr = JSON.parseObject(inivestor, Inivestor.class);
       		List<Intention> intentions = JSONArray.parseArray(intentionList, Intention.class);
       		inivestorService.updateEnterprise(inivestorr, intentions);
   		} catch (Exception e) {
   			// TODO: handle exception
   			e.printStackTrace();
   		}
       	return  tag;
       }
}