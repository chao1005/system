/*******************************************************************************
* Copyright (c) 2017 by Hyetec  Corporation all right reserved.
* 2017年11月20日 11:09
* 
*******************************************************************************/
package com.hyetec.uap.wechat.service.impl;

import java.io.File;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hyetec.uap.core.service.impl.BaseServiceImpl;
import com.hyetec.uap.wechat.constant.ChatRoomType;
import com.hyetec.uap.wechat.mapper.AttachmentMapper;
import com.hyetec.uap.wechat.mapper.ChatRoomMapper;
import com.hyetec.uap.wechat.mapper.RoadshowMapper;
import com.hyetec.uap.wechat.mapper.RoadshowPersonMapper;
import com.hyetec.uap.wechat.model.Attachment;
import com.hyetec.uap.wechat.model.ChatRoom;
import com.hyetec.uap.wechat.model.Roadshow;
import com.hyetec.uap.wechat.model.RoadshowPerson;
import com.hyetec.uap.wechat.model.User;
import com.hyetec.uap.wechat.service.RoadshowService;
import com.hyetec.uap.wechat.util.UserUtils;
import com.hyetec.uap.wechat.vo.RoadshowVo;

@Service
public class RoadshowServiceImpl extends BaseServiceImpl<Roadshow, RoadshowVo> implements RoadshowService {
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table
	 * f_roadshow
	 *
	 * @hyetec
	 */
	private RoadshowMapper roadshowMapper;
	@Autowired
	private ChatRoomMapper chatRoomMapper;
	@Autowired
	private AttachmentMapper attachmentMapper;
	@Autowired
	private RoadshowPersonMapper roadshowPersonMapper;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table
	 * f_roadshow
	 *
	 * @hyetec
	 */
	public RoadshowMapper getRoadshowMapper() {
		return (RoadshowMapper) baseMapper;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table
	 * f_roadshow
	 *
	 * @hyetec
	 */
	@Autowired
	public void setRoadshowMapper(RoadshowMapper roadshowMapper) throws Exception {
		super.setBaseMapper(roadshowMapper);
		this.roadshowMapper = roadshowMapper;
	}

	@Override
	public void delByPkId(Long id, HttpServletRequest request) {
		Roadshow roadshow = roadshowMapper.selectByPrimaryKey(id);

		attachmentMapper.deleteByPrimaryKey(Long.valueOf(roadshow.getVideo()));
		List<Attachment> attachments = attachmentMapper.selectByCategory(roadshow.getPkId().toString());
		Boolean tag = true;
		for (Attachment attachment : attachments) {
			tag = delPhoto(request.getSession().getServletContext().getRealPath("/") + attachment.getUrl());
		}
		if (tag) {
			attachmentMapper.deleteByCategory(id.toString());
		}
		roadshowMapper.delByPkId(id);

		// 删除 路演的聊天室
		Long chatRoomId = roadshow.getChatroomid();
		chatRoomMapper.deleteByPrimaryKey(chatRoomId);

	}

	@Override
	public int checkName(String name, String id) {
		Roadshow roadshow = new Roadshow();
		if (id.equals("-1")) {
			roadshow.setName(name);
		} else {
			roadshow.setName(name);
			roadshow.setPkId(Long.valueOf(id));
		}
		return roadshowMapper.checkName(roadshow);
	}

	@Override
	public void insertRoad(Roadshow roadshows, List<Attachment> attachmentsFile, Attachment attachmentVideo) {
		User user = UserUtils.getUser();
		roadshows.setCreateTime(new Date());
		roadshows.setStatus(0);
		attachmentVideo.setUserId(user.getPkId().toString());
		attachmentMapper.insertSelective(attachmentVideo);
		roadshows.setVideo(attachmentVideo.getPkId().toString());
		// 创建新的房间
		// 如果没有聊天室，就新建一个聊天室，并生产相关记录
		ChatRoom chatRoom = new ChatRoom();
		chatRoom.setType(ChatRoomType.ROADSHOW);// 消息类型（0：客服；1：专家，2：路演讨论 ）
		chatRoom.setName(roadshows.getName());
		// chatRoom.setCreator(Long.parseLong(from_user_id));
		chatRoom.setCreateTime(new Date());
		chatRoom.setStartTime(roadshows.getStartTime());
		chatRoom.setEndTime(roadshows.getEndTime());
		chatRoom.setStatus(0);
		// chatRoom.setAccepter(Long.parseLong(to_user_id));
		chatRoomMapper.insert(chatRoom);
		long chatroomid = chatRoom.getPkId();
		roadshows.setChatroomid(chatroomid);
		/////////////////////////
		roadshowMapper.insertSelective(roadshows);
		for (Attachment attachment : attachmentsFile) {
			attachment.setCreateTime(new Date());
			attachment.setCategory(roadshows.getPkId().toString());
			attachmentMapper.insertSelective(attachment);
		}

	}

	@Override
	public void updateRoad(Roadshow roadshows, List<Attachment> attachmentsFile, Attachment attachmentVideo) {
		roadshowMapper.updateByPrimaryKeySelective(roadshows);
		attachmentMapper.updateByPrimaryKey(attachmentVideo);
		attachmentMapper.deleteByCategory(roadshows.getPkId().toString());
		for (Attachment attachment : attachmentsFile) {
			attachment.setCreateTime(new Date());
			attachment.setCategory(roadshows.getPkId().toString());
			attachmentMapper.insertSelective(attachment);
		}

	}

	public Boolean delPhoto(String src) {
		Boolean b = true;
		try {
			File file = new File(src);
			file.delete();
		} catch (Exception e) {
			e.printStackTrace();
			b = false;
		}
		return b;
	}

	@Override
	public List<Roadshow> selectAllw() {
		// TODO Auto-generated method stub
		return roadshowMapper.selectAllw();
	}

	@Override
	public void addPerson(Long id) {
		User users = UserUtils.getUser();
		RoadshowPerson roadshowPerson = new RoadshowPerson();
		roadshowPerson.setUserId(users.getPkId());
		roadshowPerson.setRoadshowId(id);
		roadshowPerson.setStatus(0);
		roadshowPerson.setCreateTime(new Date());
		roadshowPerson.setStartTime(new Date());
		int i = roadshowPersonMapper.selectFat(roadshowPerson);
		if (i == 0) {
			roadshowPersonMapper.insertSelective(roadshowPerson);
		}

	}

	@Override
	public List<Roadshow> selectAllwMy(Long userId) {
		// TODO Auto-generated method stub
		return roadshowMapper.selectAllwMy(userId);
	}

	@Override
	public List<Roadshow> selectStatistics(RoadshowVo roadshowVo) {

		return roadshowMapper.selectStatistics(roadshowVo);
	}

	@Override
	public List<Roadshow> selectAllTj() {
		// TODO Auto-generated method stub
		return roadshowMapper.selectAllTj();
	}
}